%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
file_extensions:
  - timl
scope: source.tim
variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'
  html_id: '[a-zA-Z_-][a-zA-Z0-9_-]*'
  end_block: '^(\s*?)@\b(end)\b'
contexts:

  main:
    - include: cssSnippet
    - include: scriptSnippet
    - include: styleSnippet
    - include: jsSnippet
    - include: json
    - include: yaml
    - include: identCall

    - match: '\b(echo)\b|@\b(include|import|end|client|placeholder)\b'
      scope: keyword.control.import.timl

    - match: '@view'
      scope: entity.name.function.timl

    - match: '(@[\w+-]*)'
      scope: entity.name.function.tim

    - match: '(@[\w+-]*)(\((.*)?\))'
      captures:
        1: entity.name.function.tim

    - match: '\b(true|false)\b'
      scope: constant.language.timl

    - match: '\$(app|this)\b'
      scope: constant.language.timl

    - match: '\b(if|elif|else|for|while|in|and|or|fn|func|block|component|return|discard|break|type|typeof)\b'
      scope: keyword.control.timl

    - match: '\b(string|int|float|bool|array|object|stream)\b'
      scope: keyword.control.timl

    - match: '\b(var|const)\b'
      captures:
        1: keyword.control.bro
      push: varIdent

    - match: (\$)([a-zA-Z_][a-zA-Z0-9_]*)\b
      scope: variable.member.timl

    - match: '([\w-]*)(=)'
      captures:
        1: entity.other.attribute-name

    - match: (\.)({{html_id}})\b
      captures:
        1: markup.bold entity.name.function
        # 2: entity.name.function

    - match: "'"
      scope: punctuation.definition.string.begin.timl
      push: single_quoted_string

    - match: '"""'
      scope: punctuation.definition.string.begin.timl
      push: triple_quoted_string

    - match: '"'
      scope: punctuation.definition.string.begin.timl
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.tim
      push: line_comment

    # - match: '>'
    #   scope: markup.bold

    - match: '(\?|\||\*|/|&|\-|\+)'
      scope: keyword.operator.logical

    - match: '(:|\.)'
      scope: markup.bold

    - match: '='
      scope: markup.bold keyword.operator.assignment.timl

    - match: '\b(?<!\-|\+)(html|head|meta|script|body|title)\b'
      scope: entity.name.tag.timl

    - match: '\b(?<!\-|\+)(main|section|article|aside|div|footer|header)\b'
      scope: entity.name.tag.timl

    - match: '\b(?<!\-|\+)(h1|h2|h3|h4|h5|h6|a|p|em|b|strong|span|small|u|pre|code|blockquote|iframe)\b'
      scope: entity.name.tag.text.timl

    - match: '\b(?<!\-|\+)(table|tbody|td|tfoot|th|thead|tr)\b'
      scope: entity.name.tag.table.timl

    - match: '\b(?<!\-|\+)(area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)\b'
      scope: entity.name.tag.selfclosing.timl

    - match: '\b(?<!\-|\+)(button|form|label|select|textarea|legend|datalist|output|option|optgroup)\b'
      scope: entity.name.tag.form.timl

    - match: '\b(?<!\-|\+)(ul|ol|dl|dt|dd|li)\b'
      scope: entity.name.tag.list.timl

    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.tim

  varIdent:
    - match: '[A-Za-z_][A-Za-z_0-9]*'
      scope: entity.name
      pop: true

  identCall:
    - match: '([A-Za-z_-][A-Za-z_0-9-]*)(\()'
      captures:
        1: entity.name.function
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.single.tim
    - match: '\\.'
      scope: constant.character.escape.tim
    - match: "'"
      scope: punctuation.definition.string.end.tim
      pop: true

  double_quoted_string:
    - meta_scope: string.quoted.double.tim
    - match: '\\.'
      scope: constant.character.escape.tim
    - match: '"'
      scope: punctuation.definition.string.end.tim
      pop: true

  triple_quoted_string:
    - meta_scope: string.quoted.double.tim
    - match: '"""'
      scope: punctuation.definition.string.end.tim
      pop: true
    - match: '"'
      pop: false

  line_comment:
    - meta_scope: comment.line.tim
    - match: $
      pop: true

  jsSnippet:
    - match: '@\b(js|do)\b'
      scope: keyword.control.import.tim
      embed: scope:source.js
      embed_scope: meta.tag.tim
      escape: ({{end_block}})
      escape_captures:
        0: keyword.control.import.tim punctuation.definition.tag.end.tim

  json:
    - match: '@\b(json)\b'
      scope: keyword.control.import.tim
      embed: scope:source.json
      embed_scope: meta.tag.tim
      escape: ({{end_block}})
      escape_captures:
        0: keyword.control.import.tim punctuation.definition.tag.end.tim

  yaml:
    - match: '@\b(yaml)\b'
      scope: keyword.control.import.tim
      embed: scope:source.yaml
      embed_scope: meta.tag.tim
      escape: ({{end_block}})
      escape_captures:
        0: keyword.control.import.tim punctuation.definition.tag.end.tim

  cssSnippet:
    - match: '@\b(css)\b'
      scope: keyword.control.import.tim
      embed: scope:source.css
      embed_scope: meta.tag.tim
      escape: ({{end_block}})
      escape_captures:
        0: keyword.control.import.tim punctuation.definition.tag.end.tim

  styleSnippet:
    - match: '\b(style)\b:(\s*?)(\"\"\")'
      captures:
        1: entity.name.tag.timl
      embed: scope:source.css
      embed_scope: meta.tag.tim
      escape: (\"\"\")
      escape_captures:
        0: triple_quoted_string punctuation.definition.tag.end.tim

  scriptSnippet:
    - match: '\b(script)\b:(\s*?)(\"\"\")'
      captures:
        1: entity.name.tag.timl
      embed: scope:source.js
      embed_scope: meta.tag.tim
      escape: (\"\"\")
      escape_captures:
        0: triple_quoted_string punctuation.definition.tag.end.tim